# Generated by Django 4.0 on 2022-02-02 17:46

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Habiter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('username', models.CharField(max_length=32, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('dob', models.DateField(null=True)),
                ('avatar', models.ImageField(null=True, upload_to='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('created', models.DateField()),
            ],
            options={
                'db_table': 'areas',
                'ordering': ['name', 'created'],
            },
        ),
        migrations.CreateModel(
            name='Journal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('descrpiption', models.TextField(max_length=500)),
                ('created', models.DateTimeField(db_index=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.habiter')),
            ],
            options={
                'db_table': 'journals',
                'ordering': ['name', 'created'],
            },
        ),
        migrations.CreateModel(
            name='MoodLogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mood', models.CharField(choices=[('happy', 'happy'), ('sad', 'sad'), ('none', 'none'), ('love', 'love'), ('angry', 'angry')], default='none', max_length=10)),
                ('created', models.DateTimeField(db_index=True)),
                ('note', models.TextField(default='')),
                ('journal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.journal')),
            ],
            options={
                'db_table': 'mood_logs',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='Habits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('notion', models.CharField(choices=[('good', 'good'), ('bad', 'bad')], default='good', max_length=10)),
                ('time_preffered', models.CharField(choices=[('morning', 'morning'), ('afternoon', 'afternoon'), ('evening', 'evening'), ('all', 'all')], default='all', max_length=20)),
                ('count_a_day', models.IntegerField(default=1)),
                ('created', models.DateTimeField(db_index=True)),
                ('completed', models.IntegerField(default=0)),
                ('skipped', models.IntegerField(default=0)),
                ('failed', models.IntegerField(default=0)),
                ('streak', models.IntegerField(default=0)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.area')),
                ('journal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.journal')),
            ],
            options={
                'db_table': 'habits',
                'ordering': ['name', 'created'],
            },
        ),
        migrations.CreateModel(
            name='HabitLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('status', models.CharField(choices=[('completed', 'completed'), ('fail', 'fail'), ('skip', 'skip')], max_length=10)),
                ('notes', models.TextField(default='')),
                ('habit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.habits')),
            ],
            options={
                'db_table': 'habit_logs',
            },
        ),
    ]
